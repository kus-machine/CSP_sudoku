import numpy as np
"""
!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
первый индекс - индекс строки, второй - столбец
board[3][7] - 4я строка, 8й столбец
"""

#функция вывода на экран матрицы 9 на 9
def show(a):
	for i in range(len(a)):
		if(i==0):
			print("<----------------------->")
		if(i%3==0 and i!=0):
			print("|-------|-------|-------|")
		print("|",a[i][0],a[i][1],a[i][2],"|",a[i][3],a[i][4],a[i][5],"|",a[i][6],a[i][7],a[i][8],"|")
	print("<----------------------->\n")

#функция соседства, выдает индексы соседей с элементом i,j
def neighbor(i,j):
	a=np.zeros((9,9),int)
	for k in range(9):
		for l in range(9):
			if(k==i or l==j):
				a[k][l]=1
	if(i%3==0 and j%3==0):
		a[i][j]=a[i][j+1]=a[i][j+2]=a[i+1][j]=a[i+1][j+1]=a[i+1][j+2]=a[i+2][j]=a[i+2][j+1]=a[i+2][j+2]=1
	if(i%3==0 and j%3==1):
		a[i][j]=a[i][j+1]=a[i][j-1]=a[i+1][j]=a[i+1][j+1]=a[i+1][j-1]=a[i+2][j]=a[i+2][j+1]=a[i+2][j-1]=1
	if(i%3==0 and j%3==2):
		a[i][j]=a[i][j-1]=a[i][j-2]=a[i+1][j]=a[i+1][j-1]=a[i+1][j-2]=a[i+2][j]=a[i+2][j-1]=a[i+2][j-2]=1
	if(i%3==1 and j%3==0):
		a[i][j]=a[i][j+1]=a[i][j+2]=a[i+1][j]=a[i+1][j+1]=a[i+1][j+2]=a[i-1][j]=a[i-1][j+1]=a[i-1][j+2]=1
	if(i%3==1 and j%3==1):
		a[i][j]=a[i][j+1]=a[i][j-1]=a[i+1][j]=a[i+1][j+1]=a[i+1][j-1]=a[i-1][j]=a[i-1][j+1]=a[i-1][j-1]=1
	if(i%3==1 and j%3==2):
		a[i][j]=a[i][j-1]=a[i][j-2]=a[i-1][j]=a[i-1][j-1]=a[i-1][j-2]=a[i+1][j]=a[i+1][j-1]=a[i+1][j-2]=1
	if(i%3==2 and j%3==0):
		a[i][j]=a[i][j+1]=a[i][j+2]=a[i-2][j]=a[i-2][j+1]=a[i-2][j+2]=a[i-1][j]=a[i-1][j+1]=a[i-1][j+2]=1
	if(i%3==2 and j%3==1):
		a[i][j]=a[i][j+1]=a[i][j-1]=a[i-2][j]=a[i-2][j+1]=a[i-2][j-1]=a[i-1][j]=a[i-1][j+1]=a[i-1][j-1]=1
	if(i%3==2 and j%3==2):
		a[i][j]=a[i][j-1]=a[i][j-2]=a[i-1][j]=a[i-1][j-1]=a[i-1][j-2]=a[i-2][j]=a[i-2][j-1]=a[i-2][j-2]=1
	return a


#обновляет функцию g, g[i][j][i1][j1][n] - элемент матрицы i,j достижим с i1, j1 по метке n
def update_g(board,g):
	for i in range(9):
		for j in range(9):
			sosedi=neighbor(i,j)
			for i1 in range(9):
				for j1 in range(9):
					#для НЕсоседей убираем все связи
					if(sosedi[i1][j1]==0):
						for k1 in range(9):
							g[i][j][i1][j1][k1]=0

					#для соседей заполненных убираем тоже все связи
					if(sosedi[i1][j1]==1 and board[i1][j1]!=0):
						for k2 in range(9):
							g[i][j][i1][j1][k2]=0

					#для соседей НЕзаполненных убираем связь только текущей цифры
					if(sosedi[i1][j1]==1 and board[i1][j1]==0):
						g[i][j][i1][j1][board[i][j]-1]=0
	return g

board=np.array([
    [5, 3, 0,    0, 7, 0,    0, 0, 0],
    [6, 0, 0,    1, 9, 5,    0, 0, 0],
    [0, 9, 8,    0, 0, 0,    0, 6, 0],

    [8, 0, 0,    0, 6, 0,    0, 0, 3],
    [4, 0, 0,    8, 0, 3,    0, 0, 1],
    [7, 0, 0,    0, 2, 0,    0, 0, 6],

    [0, 6, 0,    0, 0, 0,    2, 8, 0],
    [0, 0, 0,    4, 1, 9,    0, 0, 5],
    [0, 0, 0,    0, 8, 0,    0, 7, 9]
])

g=np.ones((9,9,9,9,9),int)

print("BOARD:")
show(board)


#print("neighbor(3,7):")
#show(neighbor(3,7))
g=update_g(board,g)
print(g[0][1][0][2])